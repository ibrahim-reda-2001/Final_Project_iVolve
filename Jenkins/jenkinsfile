@Library('my-shared-library@master') _

pipeline {
    agent { label 'slave1' }

    environment {
        // ======== Externalized Configurations ========
        // Repository Configurations
        NEXUS_URL = '18.234.225.53:8081'
        REPO_NAME = 'ivolve-jar'
        GROUP_ID = 'ivolve'
        ARTIFACT_ID = 'ivolve-app'
        JAR_FILE = 'build/libs/demo-0.0.1-SNAPSHOT.jar'
        
        // Credential IDs (from Jenkins Credential Store)
        NEXUS_CREDS = 'nexus-password'
        DOCKER_CREDS = 'docker-password'
        K8S_CREDS = 'k8s-token'
        
        // Versioning
        BUILD_VERSION = "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}"
        
        // Docker/K8s Config
        DOCKER_USER = 'ibrahimelmsery1'
        DOCKER_IMAGE = 'ivolve-app'
        K8S_CLUSTER = 'https://172.31.85.77:6443'
        K8S_NAMESPACE = 'ivolve'
        
        // SonarQube Config
        SONAR_PROJECT_KEY = 'demo-app'
        SONAR_PROJECT_NAME = 'demo-springboot-app'
    }

    tools {
        gradle 'ibra-gradle'
    }

    stages {
        // Existing stages remain unchanged below
        // Only variable references are modified in the stages
        // -----------------------------------------------
        
        stage('Checkout SCM') {
            steps { checkout scm }
        }

        stage('Build') {
            steps {
                dir('Jenkins') { sh 'gradle build' }
            }
            post {
                success { echo 'Build Success' }
                failure { echo 'Build Failed' }
            }
        }

        stage('Test') {
            steps {
                dir('Jenkins') { sh 'gradle test' }
            }
            post {
                success { echo 'Test Success' }
                failure { echo 'Test Failed' }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-tool'
            }
            steps {
                withSonarQubeEnv('sonar-server') {
                    dir('Jenkins') { 
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.java.binaries=build/classes/java/main/,build/classes/java/test/ \
                            -Dsonar.sources=src/main/java/ \
                            -Dsonar.tests=src/test/java/ \
                            -Dsonar.junit.reportPaths=build/test-results/test/
                        """
                    }
                }
            }
        }

        stage('test shared-lib and docker build') {
            steps {
                dir('Docker'){
                    dockerbuild("${DOCKER_CREDS}", "${DOCKER_USER}", "${DOCKER_IMAGE}")
                }
            }
        }

        stage('update maifistfile') {
            steps {
                dir('Kubernetes'){
                   k8sdeploy("${K8S_CREDS}", "${K8S_CLUSTER}", "${DOCKER_IMAGE}", "${K8S_NAMESPACE}")
                }
            }
        }

        stage('nexus-publish'){
            steps{
                dir('Jenkins') {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${NEXUS_URL}",
                        groupId: "${GROUP_ID}",
                        version: "${BUILD_VERSION}",  
                        repository: "${REPO_NAME}",
                        credentialsId: "${NEXUS_CREDS}",
                        artifacts: [
                            [artifactId: "${ARTIFACT_ID}",
                             classifier: '',
                             file: "${JAR_FILE}",
                             type: 'jar']
                        ]
                    )
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: "#ivolve-app",
                color: "#00FF00",
                message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
        failure {
            slackSend(
                channel: "#ivolve-app",
                color: "#FF0000",
                message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
        cleanup {
            cleanWs()
        }
    }
}